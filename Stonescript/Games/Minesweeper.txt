/*
SSRPG Version: 3.49.4
Version: 1.2
author: xx
*/
/*
instruction:
//	import Games/Minesweeper

v1.2 edited by Mind Stone Thief
Support Mobile

if you feel stuck while running, can use:
//	var minesweeper = new Games/Minesweeper
//	minesweeper.run(positive real number)
to change update frequency per frame

update frequency per frame is default to 20
*/

var text

var data = []
var width = 9
var height = 9

var mine = []
var mineCount = 0

var flagCount = 0
var targetCount = 0

var mainBox
var mainBoxText
var mainBoxCanvas
var targetBox
var targetBoxText
var timerBox
var timerBoxText
var titleText
var guideText
var difficultySelectionText

var buttonList = []

var inputX = -1
var inputY = -1

var state = "initialize"

var difficulty = [[8,8,10], [16,16,40], [30,16,99]]
var difficultyText = [["#0000ff","beginner"], ["#00ff00","intermediate"], ["#ff0000","expert"]]
var difficultyTextLength = 14
var difficultyIndex = difficulty.Count() - 1

var timer = 0
var secTimer = 0

var cx = 0
var cy = 0
var cx2 = 0
var cy2 = 0
var cl = []
var ct = 0
var cc = 0

var a = 0
var b = 0

func main(fre)
	?loc.loop
		createUI()
		redraw()
	
	for i = 1..fre
		?string.Equals(state, "playing")
			?playing()
				break
		:?string.Equals(state, "processVicinityData")
			?processVicinityData()
				break
		:?string.Equals(state, "title")
			?title()
				break
		:?string.Equals(state, "drawMines")
			?drawMines()
				break
		:?string.Equals(state, "setupData")
			?setupData()
				break
		:?string.Equals(state, "setupTarget")
			?setupTarget()
				break
		:?string.Equals(state, "restart")
			?restart()
				break
		:?string.Equals(state, "initialize")
			?initialize()
				break
		:
			break

	globalInput()

	//showdata(fre)

func globalInput()
	?key = bumpRBegin
		createMap()
	:?key = backEnd
		changeState("restart")

func initialize()
	key.Bind(BumpL, Z, Mouse1)
	createUI()
	changeState("restart")
	return true

func restart()
	mainBoxText.visible = false
	setupLevel(difficulty.Count() - 1)
	setTimerBoxText(0)
	setDifficultySelectionText()
	difficultySelectionText.visible = inherit
	changeState("title")
	return true

func setupScreen()
	mainBox.w = width + 2
	mainBox.h = height + 2
	mainBox.y = 1

	mainBoxText.w = width
	mainBoxText.h = height

	titleText.y = -mainBox.h / 4

	targetBox.x = mainBox.x - mainBox.w / 2 + 2
	targetBox.y = mainBox.y - mainBox.h / 2 - 2

	timerBox.x = mainBox.x + mainBox.w / 2 - 3
	timerBox.y = targetBox.y

func initcache()
	cx = 0
	cy = 0
	cx2 = 0
	cy2 = 0
	cl.Clear()
	ct = 0
	cc = 0

func setupLevel(i)
	width = difficulty[i][0]
	height = difficulty[i][1]
	mineCount = difficulty[i][2]

	setTargetBoxText(0)

	flagCount = 0
	targetCount = width * height - mineCount
	
	setupScreen()

func createMap()
	mainBoxText.visible = false
	titleText.visible = false
	guideText.visible = false
	difficultySelectionText.text = "loading..."
	difficultySelectionText.visible = inherit

	setupLevel(difficultyIndex)

	initTimer()

	initcache()
	text = ""
	data.Clear()
	mine.Clear()
	changeState("setupTarget")

func title()
	setTitleText("#rainFF", 1) //"M I N E S W E E P E R"
	setGuideText("#99ccff", "↑↓-SwchLv  X-Back  C-(Re)Start")

	?key = up | key = down
		?key = upEnd | key = downEnd
			ct = 0
		:
			?!ct
				?key = up
					difficultyIndex = (difficultyIndex + difficulty.Count() - 1) % difficulty.Count()
				:?key = down
					difficultyIndex = (difficultyIndex + 1) % difficulty.Count()
				setDifficultySelectionText()
			ct = (ct + 1) % 5

	return true

func setDifficultySelectionText()
	var t = ""
	?difficultyIndex - 1 >= 0
		t += string.Format("▲\n[color={0}]{1}[/color]\n", difficultyText[difficultyIndex - 1][0],  difficultyText[difficultyIndex - 1][1])
	:
		t += "\n\n"
	t += string.Format("[[color={0}]{1}[/color]]", difficultyText[difficultyIndex][0], difficultyText[difficultyIndex][1])
	?difficultyIndex + 1 < difficulty.Count()
		t += string.Format("\n[color={0}]{1}[/color]\n▼", difficultyText[difficultyIndex + 1][0],  difficultyText[difficultyIndex + 1][1])
	:
		t += "\n\n"
	difficultySelectionText.text = t

func setTitleText(color, frame)
	titleText.frame = frame
	titleText.color = color
	titleText.visible = inherit

func setGuideText(color, frame)
	guideText.text = frame
	guideText.color = color
	guideText.visible = inherit


func win()
	setTitleText("#rainFF", 2) //"Y O U  W I N"
	setGuideText("#99ccff", "X-GoToTitle  C-RestartGame")

func drawMines()
	?mine.Count()
		var z = mine[0]
		cx = z[0]
		cy = z[1]
		whiteDataToScreen(cx, cy, "@")
		mine.RemoveAt(0)
	:
		gameover()
		changeState("gameover")
	return true

func gameover()
	setTitleText("#cc0000", 3) //"gameover"
	setGuideText("#99ccff", "X-GoToTitle  C-RestartGame")

func setupData()
	?data.Count() < height * width
		?ct ! data.Count()
			cx = data.Count() % width
			cy = math.FloorToInt(data.Count() / width)

			?isTarget(cx, cy)
				cc = -8
			:
				cx2 = cx - 1
				cy2 = cy - 1
				cc = 0

			ct = data.Count()

		:?cc < 0
			cc++
			?cc = 0
				addData("@")

		:?cy2 > cy + 1
			?cc
				addData(cc)
			:
				addData("#")

		:
			?!(cx2 = cx & cy2 = cy) & isTarget(cx2, cy2)
				cc++
			cx2++
			?cx2 > cx + 1
				cx2 = cx - 1
				cy2++
	:
		mainBoxText.text = text
		mainBoxText.visible = inherit
		difficultySelectionText.visible = false
		changeState("playing")
		return true
	return false

func addData(s)
	data.Add([s, 0])
	text += "o"
	setTimerBoxText(width * height - data.Count())

func setupTarget()
	?mine.Count() < mineCount
		var x = rng % width
		var y = rng % height
		?!isTarget(x, y)
			mine.Add([x, y])
			setTargetBoxText(mine.Count())
	:
		changeState("setupData")
		return true
	return false

func isTarget(x, y)
	?mine.Count() & inRange(x, y)
		for i = 0..mine.Count() - 1
			?x = mine[i][0] & y = mine[i][1]
				return true
	return false

func playing()
	>`@mainBox.absoluteX@,@mainBox.absoluteY+mainBox.h-1@,Z/R.->flag
	updateTimer()
	?key = primaryBegin | key = bumpLBegin
		var x = input.x - (mainBox.absoluteX + 1)
		var y = input.y - (mainBox.absoluteY + 1)
		?inRange(x, y)
			?key = bumpLBegin
				?flagTile(x, y)
					return false
			:?key = primaryBegin
				?openTile(x, y)
					return false
	return true

func initTimer()
	timer = 0
	secTimer = 0
	setTimerBoxText(width * height)

func updateTimer()
	timer = (timer + 1) % 30
	?!timer
		secTimer++
		setTimerBoxText(secTimer)

func flagTile(x,y)
	var z = data[getIndex(x, y)]
	?!z[1]
		z[1] = -1
		whiteDataToScreen(x, y, "▶")
		flagCount++
		setTargetBoxText(mineCount - flagCount)
	:?z[1] < 0
		z[1] = 0
		whiteDataToScreen(x, y, "o")
		flagCount--
		setTargetBoxText(mineCount - flagCount)
	return false

func openTile(x, y)
	var z = data[getIndex(x, y)]

	?z[0] = "@"
		whiteDataToScreen(x, y, z[0])
		startGameOver()
		return true

	:?!z[1]
		z[1] = 1
		targetCount--

		whiteDataToScreen(x, y, z[0])

		?z[0] = "#"
			startProcessVicinityData(x, y)
			return true
		:?!targetCount
			win()
			changeState("win")
	return false

func whiteDataToScreen(x, y, n)
	var z = getIndex(x, y)
	text = string.sub(text, 0, z) + n + string.sub(text, z + 1)
	mainBoxText.text = text

func startGameOver()
	initcache()
	changeState("drawMines")

func startProcessVicinityData(x, y)
	?state ! "processVicinityData"
		initcache()
		changeState("processVicinityData")
	cl.Add([x, y])

func processVicinityData()
	?!cc
		?ct < cl.Count()
			var z = cl[ct]

			cx = z[0]
			cy = z[1]

			cc = 8

			ct++
		:
			changeState("playing")
			return true

	:
		cx2 = cx + getoffset(cc + 1)
		cy2 = cy + getoffset(cc + 3)

		?!(cx2 = cx & cy2 = cy) & inRange(cx2, cy2)
			openTile(cx2, cy2)

		cc--
	return false

func getoffset(n)
	n = n % 8
	?n % 4
		?n < 4
			return -1
		:
			return 1
	:
		return 0

func inRange(x, y)
	return x >= 0 & x < width & y >= 0 & y < height

func showdata(fre)
	>@fre@ @state@ @difficultyIndex@\n
	^@inputX@ @inputY@ @ct@ @cc@\n
	^@cx@ @cy@ @cx2@ @cy2@\n
	^@cl.Count()@ @input.x@ @input.y@\n
	^@screen.w@ @screen.h@ @targetCount@\n
	^@mainBox.absoluteX@ @mainBox.absoluteY@ @a@ @b@

func setTimerBoxText(n)
	timerBoxText.text = numberToString(math.max(0, n))

func setTargetBoxText(n)
	targetBoxText.text = numberToString(math.max(0, n))

func changeState(str)
	state = str

func createUI()
	mainBox = ui.AddPanel()
	
	mainBoxText = ui.AddText()
	mainBoxText.visible = false
	mainBox.Add(mainBoxText)

	targetBox = ui.AddPanel()
	targetBox.w = 5
	targetBox.h = 3

	targetBoxText = ui.AddText()
	targetBoxText.text = "000"
	targetBoxText.w = 3
	targetBoxText.h = 1
	targetBox.Add(targetBoxText)

	timerBox = ui.AddPanel()
	timerBox.w = 5
	timerBox.h = 3

	timerBoxText = ui.AddText()
	timerBoxText.text = "000"
	timerBoxText.w = 3
	timerBoxText.h = 1
	timerBox.Add(timerBoxText)

	titleText = ui.AddAnim(ascii

%%
M I N E S W E E P E R
%%
####Y O U   W I N
%%
######gameover
asciiend)
	titleText.Stop()
	mainBox.Add(titleText)

	guideText = ui.AddText()
	guideText.w = screen.w
	guideText.h = 1
	guideText.y = -1
	guideText.align = center
	guideText.anchor = bottom_center
	guideText.dock = bottom_center
	mainBox.Add(guideText)
	

	difficultySelectionText = ui.AddText()
	difficultySelectionText.w = screen.w
	difficultySelectionText.y = mainBox.y + mainBox.h * 2 / 3
	difficultySelectionText.align = center
	mainBox.Add(difficultySelectionText)

	setupScreen()
	
	BuildArrowButton(0, 0, •)
	BuildArrowButton(0, -3, ↑)
	BuildArrowButton(0, 3, ↓)
	BuildArrowButton(5, 0, ←)

func BuildArrowButton(x, y, t)
	var button = ui.AddButton()
	button.text = t
	button.w = 5
	button.h = 3
	button.x = x
	button.y = y
	button.style = 1
	button.anchor = center_left
	button.dock = center_left
	button.SetPressed(buttonAction)
	buttonList.Add(button)

func buttonAction(btn)
	?buttonList[0] = btn
		createMap()
	:?buttonList[1] = btn
		difficultyIndex = (difficultyIndex + difficulty.Count() - 1) % difficulty.Count()
		setDifficultySelectionText()
	:?buttonList[2] = btn
		difficultyIndex = (difficultyIndex + 1) % difficulty.Count()
		setDifficultySelectionText()
	:?buttonList[3] = btn
		changeState("restart")

func redraw()
	?string.Equals(state, "playing") | string.Equals(state, "drawmines") |
	^string.Equals(state, "win") | string.Equals(state, "gameover")
		mainBoxText.text = text
		mainBoxText.visible = inherit
		setTargetBoxText(mineCount - flagCount)
		setTimerBoxText(secTimer)
		?string.Equals(state, "win")
			win()
		:?string.Equals(state, "gameover")
			gameover()
	:?string.Equals(state, "title")
		restart()

func run(fre)
	main(fre)

main(20)


func getIndex(x, y)
	return width * y + x

func numberToString(n)
	n = "00" + n
	return string.sub(n, string.size(n) - 3)