//v1.4


//////////     initialize     //////////


disable hud
disable player

var x
var y
var n

var loopStopTime = 0
var timer = 0
var cache
var speedText = "0 1"
var speedTextY = screen.h - 1
var text
var textX
var textY = screen.h / 4

var initialize = true

var box
var data
var space


var headX = screen.w / 2
var headY = screen.h / 2

var direction = 8
var currentDirection = 8
var move = false

var level = 1
var speed = 10

var length = 0
var eaten = 0


var food = true
var foodX = headX
var foodY = headY
var range = headX % 2

var bodyX = ""
var bodyY = ""
var color = "#FFFFFF"

var score = 0
var highestScore = 0
var highestScoreX = screen.w - 1

var gameover = false
var refreshScore = false
var ouroboros = -1
var start = true
var stop = false

?loc.loop & !start & !gameover
	loopStopTime = 30

?initialize
	box = "╔"
	for x = 3..screen.w
		box = box + "═"
	box = box + "╗\n"
	for y = 3..screen.h
		box = box + "║"
		for x = 3..screen.w
				box = box + " "
		box = box + "║\n"
	box = box + "╚"
	for x = 3..screen.w
		box = box + "═"
	box = box + "╝"
	
	data = ""
	for i = 1..screen.h - 2 //y
		for j = 1..screen.w - 2 //x
			?j % 2 = range & !(j = headX & i = headY)
				data = data + " " + mergeCoordinate(j, i)
	
	initialize = false
>`0,0,@box@

func setSpeed()
	cache = levelCalculation(speed)
	?eaten >= cache * cache * 10
		speed = math.clamp(speed - 1, 0, 10)
			
func reset()
	timer = 0
	
	space = data
	
	
	food = false
	
	headX = screen.w / 2
	headY = screen.h / 2
	direction = 8
	currentDirection = 8
	length = 7
	eaten = 0
	
	bodyX = ""
	bodyY = ""
	color = "#FFFFFF"
	
	score = 0
	gameover = false
	refreshScore = false
	ouroboros = -1
	start = false
	
	speed = levelCalculation(level)


//////////     food     //////////


?food
	>`@foodX@,@foodY@,#rainFF,ʘ
:
	cache = (rng % (string.size(space) / 5)) * 5
	
	foodX = int.parse(string.sub(space, cache + 1, 2))
	foodY = int.parse(string.sub(space, cache + 3, 2))
	food = true


//////////     move     //////////


?move & !start & !gameover
	bodyX = toString(headX) + bodyX
	bodyY = toString(headY) + bodyY
	?string.size(bodyX) > length * 2 & string.size(bodyY) > length * 2
		space = space + " " + string.sub(bodyX, length * 2, 2) + string.sub(bodyY, length * 2, 2)
		bodyX = string.sub(bodyX, 0, length * 2)
		bodyY = string.sub(bodyY, 0, length * 2)

	?direction = 2
		headY++
		currentDirection = 2
	:?direction = 4
		headX = headX - 2
		currentDirection = 4
	:?direction = 6
		headX = headX + 2
		currentDirection = 6
	:?direction = 8
		headY--
		currentDirection = 8

	
	?headX <= 0 | headX >= screen.w - 1 |
	^headY <= 0 | headY >= screen.h - 1
		headY = math.clamp(headY, 1, screen.h - 2)
		headX = math.clamp(headX, 1, screen.w - 2)
		endProcessing()
	:
		cache = string.indexof(space, " " + mergeCoordinate(headX, headY))
		?cache ! -1
			space = string.sub(space, 0, cache) + string.sub(space, cache + 5)
	
	
	?headX = foodX & headY = foodY
		score = score + levelCalculation(speed)
		length++
		eaten++
		setSpeed()
		food = false


>`@headX@,@headY@,O


//////////     body     //////////


?length > 0
	for i = 0..length - 1
		?string.size(bodyX) > i * 2 & string.size(bodyY) > i * 2
			x = int.parse(string.sub(bodyX, i * 2, 2))
			y = int.parse(string.sub(bodyY, i * 2, 2))		

			?ouroboros ! -1
				color = (i + ouroboros) % 7
				?color = 0
					color = "#FF0000"
				:?color = 1
					color = "#FFA500"
				:?color = 2
					color = "#FFFF00"
				:?color = 3
					color = "#008000"
				:?color = 4
					color = "#00FFFF"
				:?color = 5
					color = "#0000FF"
				:?color = 6
					color = "#4B0082"
				:?color = 7
					color = "#800880"

			>`@x@,@y@,@color@,o
			?!gameover & x = headX & y = headY
				?i = length - 1
					ouroboros = 0
				endProcessing()


//////////     input     //////////


?key = backBegin
	reset()
:?key = bumpRBegin
	?!start & !gameover
		stop = !stop

?start | gameover
	?key = downBegin
		changeInitialSpeed(-5)
	?key = leftBegin
		changeInitialSpeed(-1)
	?key = rightBegin
		changeInitialSpeed(1)
	?key = upbegin
		changeInitialSpeed(5)
:	
	?key = down
		?currentDirection ! 8
			direction = 2
	:?key = left
		?currentDirection ! 6
			direction = 4
	:?key = right
		?currentDirection ! 4
			direction = 6
	:?key = up
		?currentDirection ! 2
			direction = 8


//////////     title     //////////


?gameover
	textY = screen.h / 4
	>c-5,@textY@,[X] restart
	
	speedOption()
	showStop()

	?ouroboros ! -1
		ouroboros = (ouroboros + 1) % 7


	textY = -textY
	?refreshScore
		>c@textX@,@textY@,#rainFF,@text@
		textY--
		>c-2,@textY@,#rainFF,n e w
	:
		>c@textX@,@textY@,@text@
:?start
	>c-4,@textY@,[X] start
	speedOption()
	showStop()

func speedOption()
	cache = textY - 2
	>c-4,@cache@,<- @speedText@ ->
	cache--
	>c-2,@cache@,speed
	
func showStop()
	cache = textY + 1
	>c-4,@cache@,[C] stop
	
func changeInitialSpeed(n)
	level = level + n
	level = math.clamp(level, 1, 10)
	speedText = toString(level)
	speedText = string.sub(speedText, 0, 1) + " " + string.sub(speedText, 1, 1)
	

func endProcessing()
	?!gameover
		?score > highestScore
			highestScore = score
			highestScoreX = screen.w - numberLength(score)
			refreshScore = true

		text = ""
		cache = "0" + score
		cache = string.sub(cache, 1)
		?string.size(cache) % 2 = 0
			for i = 0..string.size(cache) - 1
				text = text + string.sub(cache, i, 1) + " "
			text = string.sub(text, 0, string.size(text) - 1)
		:
			text = cache
		textX = -string.size(text) / 2

		gameover = true


//////////     display score and update timer     //////////


>`0,0,@score@
>`@highestScoreX@,0,#rainFF,@highestScore@

cache = levelCalculation(speed)
>`0,@speedTextY@,speed:@cache@

?loopStopTime
	loopStopTime--
	>c0,0,@loopStopTime@
:?stop
	>c-3,0,s t o p
	move = false
:
	timer = (timer + 1) % speed
	move = timer = 0


////////////////////////////////////////


func levelCalculation(n)
	return 11 - n

func numberLength(n)
	?n < 10
		return 1
	:?n < 100
		return 2
	:?n < 1000
		return 3
	:?n < 10000
		return 4
	:?n < 100000
		return 5

func toString(n)
	n = "0" + n
	n = string.sub(n, string.size(n) - 2)
	return n

func mergeCoordinate(x, y)
	return toString(x) + toString(y)

