// Snake
// v1.5.2
// by: XX


//////////  initialize  /  start  //////////


var initialize = 2

var data = ["",[],[]]
var maxSpace = 0
var space = []
var countX = []

var headX = screen.w / 2
var headY = screen.h / 2
var range = headX % 2

var direction = 8
var currentDirection = 8
var move = false

var initialLevel = storage.get("level", 1)
var currentLevel = 1
var speed = 10

var length = 0
var eaten = 0

var food = true
var foodX = headX
var foodY = headY

var body = []
var bodyImg = ""
var color = "#FFFFFF"

var score = 0
var highestScore
var highestScoreX = screen.w - 1

// initialize
// createData
// start
// playing
// gameover
// stop
var gameState = "initialize"
var refreshScore = false
var ouroboros = -1

var x = 0
var y = 0
var count = 0
var index

var loopStopTime = 0
var timer = 0
var cache

var speedText
var speedTextY = screen.h - 1
var text
var textX
var textY = screen.h / 4


?loc.loop & gameState = "playing"
	gameState = "stop"
	loopStopTime = 30
	timer = -1
	move = true

//////////  initialize  /  end  //////////


//////////////////////////////////////
//////////  main  /  start  //////////
//////////////////////////////////////


func main()
	>`0,0,@box@

	?gameState = "initialize"
		disable hud
		disable player

		y = 0
		box = ""
		data.Clear()
		data.Add("")
		for i = 0..2
			data.Add([])
		maxSpace = 0

		gameState = "createData"

	:?gameState = "createData"
		createInitialBox()
		createInitialData()
		y++
		?y = screen.h
			data[0] = box

			//get Storage Data
			changeInitialSpeed(0)
			updateHighestScore(storage.get("score", 0))

			gameState = "start"
	:
		checkInput()
		drawFood()
		?gameState = "playing"
			moveProcessing()

		?gameState ! "gameover"
			>`@headX@,@headY@,O

		drawTitle()
		displayScore()
		updateTimer()

////////////////////////////////////
//////////  main  /  end  //////////
////////////////////////////////////


////////////////////////////////////////

func createInitialBox()
	?y = 0
		box = box + "╔"
		for x = 3..screen.w
			box = box + "═"
		box = box + "╗\n"
	:?y = screen.h - 1
		box = box + "╚"
		for x = 3..screen.w
			box = box + "═"
		box = box + "╝"
	:
        ?y = 1
            cache = "║"
            for x = 3..screen.w
                cache = cache + " "
            cache = cache + "║\n"
        box = box + cache

func createInitialData()
	countX = 0
	for x = 0..screen.w - 1
		space = !(x = headX & y = headY) &
		^y ! 0 & y ! screen.h - 1 &
		^x ! 0 & x ! screen.w - 1
		data[1].Add(space)
		?space & x % 2 = range
			countX++
		maxSpace++
	data[2].Add(countX)



func setSpeed()
	?eaten >= currentLevel * currentLevel * 10
		speed = math.clamp(speed - 1, 0, 10)
		currentLevel = levelCalculation(speed)

func reset()
	timer = 0

	box = data[0]
	space = data[1]
	countX = data[2]
	
	food = false
	
	headX = screen.w / 2
	headY = screen.h / 2
	direction = 8
	currentDirection = 8
	length = 6
	eaten = 0
	
	body = []

	color = "#FFFFFF"
	
	score = 0
	gameState = "playing"
	refreshScore = false

	storage.set("level", initialLevel)
	currentLevel = initialLevel
	speed = levelCalculation(initialLevel)

////////////////////////////////////////


//////////  food  /  start  //////////

func drawFood()
	?food
		>`@foodX@,@foodY@,#rainFF,ʘ
	:
		?body.Count() + 1 = maxSpace
			foodX = rng % (screen.w - 2) + 1
			foodY = rng % (screen.h - 2) + 1
		:
			cache = false
			foodY = rng % (screen.h - 2)
			for i = 1..screen.h
				?!cache
					i = foodY
					cache = true

				i = i % (screen.h - 2)
				?i = 0
					i++

				?countX[i]
					foodY = i + 1
					countX[i] = countX[i] - 1
					i = screen.h

			cache = false
			foodX = rng % (screen.w - 2)
			?foodX % 2 ! range
				foodX = foodX + 1
				?foodX >= screen.w - 1
					?range = 1:
						foodX = 1
					:
						foodX = 2

			for i = 1..screen.w + 1
				?!cache
					i = foodX
					cache = true

				i = i % screen.w
				?i % 2 ! range | i = 0:
					i = i + 1

				?space[screen.w * foodY + i] = " "
					foodX = i
					i = screen.w
				
				i++

		food = true

//////////  food  /  end  //////////


//////////  move  /  start  //////////

func moveProcessing()
	?move
		index = getIndex(headX, headY, "s")
		box = string.sub(bodyImg, 0, index) + "o" + string.sub(bodyImg, index + 1)

		index = getIndex(headX, headY, "a")
		body.Add([headX, headY])

		?body.Count() > length
			cache = body.RemoveAt(0)
			index = getIndex(index[0], index[1], "s")
			box = string.sub(bodyImg, 0, index) + " " + string.sub(bodyImg, index + 1)

			index = getIndex(index[0], index[1], "a")
			space[index] = true

		?direction = 2
			headY++
			currentDirection = 2
		:?direction = 4
			headX = headX - 2
			currentDirection = 4
		:?direction = 6
			headX = headX + 2
			currentDirection = 6
		:?direction = 8
			headY--
			currentDirection = 8

		
		?headX <= 0 | headX >= screen.w - 1 |
		^headY <= 0 | headY >= screen.h - 1
			headY = math.clamp(headY, 1, screen.h - 2)
			headX = math.clamp(headX, 1, screen.w - 2)
			endProcessing()
		:
			//?space.Count() > 0
			//	for i = 0..space.Count()
			//		cache = space[i]
			//		?cache[0] = headX & cache[1] = headY
			//			space.RemoveAt(i)
			//			>`0,3,@i@
			//			i = count

			space[getIndex(headX, headY, "a")] = false
		
		
		?headX = foodX & headY = foodY
			cache = currentLevel
			?cache >= 10
				cache = cache * 2
			score = score + cache
			length++
			eaten++
			setSpeed()
			food = false

func getIndex(x, y, type)
	?type = "s"
		return (screen.w + 2) * y + x
	:?type = "a"
		return screen.w * y + x

//////////  move  /  end  //////////


//////////  body  /  start  //////////

func drawBody()
	?body.Count() > 0
		for i = 0..body.Count()
			//?i < count
			cache = body[i]
			x = cache[0]
			y = cache[1]

			?ouroboros ! -1
				color = (i + ouroboros) % 7
				?color = 0
					color = "#FF0000"
				:?color = 1
					color = "#FFA500"
				:?color = 2
					color = "#FFFF00"
				:?color = 3
					color = "#008000"
				:?color = 4
					color = "#00FFFF"
				:?color = 5
					color = "#0000FF"
				:?color = 6
					color = "#4B0082"
				:?color = 7
					color = "#800880"

			>`@x@,@y@,@color@,o
			?gameState = "playing" & x = headX & y = headY
				?i = 0
					ouroboros = 0
					?length = maxSpace
						score = score * 7
				endProcessing()

//////////  body  /  end  //////////


//////////  input  /  start  //////////

func checkInput()
	?key = back & key = bumpL & key = bumpR
		initialize = 2
		gameState = "initialize"
		return

	?key = backBegin
		gameState = "start"

	?key = bumpRBegin
		?gameState = "playing"
			gameState = "stop"
			loopStopTime = 0
		:?gameState = "stop"
			gameState = "playing"

	?gameState = "start" | gameState = "gameover"
		?key = backBegin
			reset()
		:?key = downBegin
			changeInitialSpeed(-5)
		:?key = leftBegin
			changeInitialSpeed(-1)
		:?key = rightBegin
			changeInitialSpeed(1)
		:?key = upbegin
			changeInitialSpeed(5)
	:
		?key = down
			?currentDirection ! 8
				direction = 2
		?key = left
			?currentDirection ! 6
				direction = 4
		?key = right
			?currentDirection ! 4
				direction = 6
		?key = up
			?currentDirection ! 2
				direction = 8

//////////  input  /  end  //////////


//////////  title  /  start  //////////

func drawTitle()
	?gameState = "gameover"
		textY = screen.h / 4
		>c-5,@textY@,[X] restart
		
		speedOption()
		showStop()

		?ouroboros ! -1
			ouroboros = (ouroboros + 1) % 7


		textY = -textY
		?refreshScore
			>c@textX@,@textY@,#rainFF,@text@
			textY--
			>c-2,@textY@,#rainFF,n e w
		:
			>c@textX@,@textY@,@text@
	:?gameState = "start"
		>c-4,@textY@,[X] start
		speedOption()
		showStop()

func speedOption()
	cache = textY - 2
	>c-4,@cache@,<- @speedText@ ->
	cache--
	>c-2,@cache@,speed
	
func showStop()
	cache = textY + 1
	>c-4,@cache@,[C] stop
	
func changeInitialSpeed(n)
	initialLevel = initialLevel + n
	initialLevel = math.clamp(initialLevel, 1, 10)
	speedText = toString(initialLevel)
	speedText = string.sub(speedText, 0, 1) + " " + string.sub(speedText, 1, 1)
	

func endProcessing()
	?gameState ! "gameover"
		?score > highestScore
			updateHighestScore(score)
			refreshScore = true

		text = ""
		cache = "0" + score
		cache = string.sub(cache, 1)
		?string.size(cache) % 2 = 0
			for i = 0..string.size(cache) - 1
				text = text + string.sub(cache, i, 1) + " "
			text = string.sub(text, 0, string.size(text) - 1)
		:
			text = cache
		textX = -string.size(text) / 2

		gameState = "gameover"

func updateHighestScore(s)
	highestScore = s
	storage.set("score", highestScore)
	highestScoreX = screen.w - numberLength(highestScore)

//////////  title  /  end  //////////


//////////  display score and update timer  /  start  //////////

func displayScore()
	>`0,0,@score@
	>`@highestScoreX@,0,#rainFF,@highestScore@

	>`0,@speedTextY@,speed:@currentLevel@

func updateTimer()
	?gameState = "playing"
		timer = (timer + 1) % speed
		move = timer = 0
	:
		move = false
		?gameState = "stop"
			?loopStopTime
				loopStopTime--
				>c0,0,@loopStopTime@
				?!loopStopTime
					gameState = "playing"
			:
				>c-3,0,s t o p

//////////  display score and update timer  /  end  //////////


////////////////////////////////////////

func levelCalculation(n)
	return 11 - n

func numberLength(n)
	?n < 10
		return 1
	:?n < 100
		return 2
	:?n < 1000
		return 3
	:?n < 10000
		return 4
	:?n < 100000
		return 5
	:?n < 1000000
		return 6

func toString(n)
	n = "0" + n
	n = string.sub(n, string.size(n) - 2)
	return n


main()